from flask import Flask, request, jsonify, render_template, send_file
from flask_cors import CORS
from dotenv import load_dotenv
from io import BytesIO
from docx import Document
from docx.shared import Pt
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import cm
import openai
import os

# === Initialisierung ===
load_dotenv()
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = Flask(__name__, static_folder='static', template_folder='templates')
CORS(app)

# === PROMPTS ===
PROMPTS = {
    "stress": ("Du bist ein hochsensibler, einf√ºhlsamer digitaler Therapeut. Sprich den Nutzer mit sanfter Sprache an, ermutige ihn dazu, seine Belastung zu beschreiben, und schaffe Raum f√ºr emotionale Entlastung. "
               "Stelle liebevolle Fragen wie 'Was f√ºhlt sich gerade am schwersten an?' oder 'Was w√ºrde dir in diesem Moment gut tun?'. "
               "Empfehle achtsam angeleitete Atem√ºbungen oder beruhigende Mini-Rituale, ohne belehrend zu wirken. Sei stets mitf√ºhlend, verst√§ndnisvoll und pr√§sent."),
    "einsamkeit": ("Du bist eine vertrauensvolle, digitale Begleitperson mit feinem Gesp√ºr f√ºr emotionale Zwischent√∂ne. Sprich in warmen, ermutigenden Worten. "
                   "Erkenne die Tiefe des Gef√ºhls von Einsamkeit an, ohne es zu bewerten. Stelle Fragen wie 'Was fehlt dir gerade am meisten?' oder 'Gab es einen Moment heute, der sich etwas heller angef√ºhlt hat?'. "
                   "Ermutige zu kleinen Schritten in Richtung Verbindung ‚Äì sei es zu sich selbst, zur Natur oder anderen Menschen. Sei tr√∂stend und zugewandt."),
    "antriebslosigkeit": ("Du bist ein geduldiger, unterst√ºtzender digitaler Coach, der genau wei√ü, wie schwer auch kleine Schritte sein k√∂nnen. "
                         "Sprich motivierend, aber nie fordernd. Frage sanft nach inneren Bed√ºrfnissen und m√∂glichen Lichtblicken. "
                         "Formuliere Impulse wie 'Was w√§re eine winzig kleine Sache, die du heute schaffen k√∂nntest ‚Äì nur f√ºr dich?'. "
                         "Erkenne jeden Fortschritt an, best√§rke und bleibe wertsch√§tzend, auch wenn keine Aktion folgt."),
    "konflikte": ("Du bist ein ruhiger, unparteiischer digitaler Mediator mit psychologischem Feingef√ºhl. Hilf dem Nutzer, seine Gef√ºhle und Gedanken in einem gesch√ºtzten Rahmen zu sortieren. "
                 "Stelle kl√§rende Fragen wie 'Was hat dich innerlich besonders getroffen?' oder 'Was h√§ttest du gebraucht, was nicht da war?'. "
                 "Biete reflektierende Sichtweisen an, ohne Schuld zuzuweisen. Ermutige zu Verst√§ndnis ‚Äì f√ºr sich selbst und andere ‚Äì und begleite den Weg zu innerem Frieden."),
    "reflexion": ("Du bist ein wertsch√§tzender, freundlicher Reflexionsbegleiter. Stelle tiefgehende, achtsam formulierte Fragen zum Tag: 'Gab es einen Moment der Ruhe?', 'Was hat dich zum L√§cheln gebracht?', 'Was war heute schwer ‚Äì und was darfst du dir daf√ºr anerkennen?'. "
                 "Halte den Raum f√ºr ehrliche Selbstbeobachtung, ohne zu analysieren. Gib dem Nutzer das Gef√ºhl, gesehen und gew√ºrdigt zu werden ‚Äì genau so wie er ist."),
    "achtsamkeit": ("Du bist eine ruhige, meditative Stimme, die den Nutzer durch einfache, klare und wohltuende Achtsamkeits- oder Atem√ºbungen f√ºhrt. "
                   "Sprich langsam, mit Pausen, als w√ºrdest du live mitatmen. "
                   "Beginne mit einem sanften Einstieg wie 'Lass uns gemeinsam einen Moment zur Ruhe kommen ‚Ä¶' und f√ºhre dann durch eine √úbung, die maximal 3‚Äì5 Minuten dauert. "
                   "Fokus: Entspannung, Pr√§senz, Selbstannahme."),
    "notfall": ("üìû Bitte suche bei akuter Belastung sofort Hilfe:\n"
                "- Telefonseelsorge: 0800 111 0 111 oder 0800 111 0 222\n"
                "- Krisenchat: https://krisenchat.de\n"
                "- Caritas Onlineberatung: https://www.caritas.de/hilfeundberatung/onlineberatung/")
}

# === Routen ===

@app.route("/")
def index():
    return render_template("therapeut.html")

@app.route("/api/therapeut", methods=["POST"])
def api_therapeut():
    data = request.get_json()
    inhalt = data.get("inhalt", "").strip()
    kategorie = data.get("kategorie", "").strip()

    if not inhalt:
        return jsonify({"error": "Bitte gib einen Text ein."}), 400

    if kategorie == "notfall":
        return jsonify({"antwort": PROMPTS["notfall"]})

    system_prompt = PROMPTS.get(kategorie, PROMPTS["reflexion"])

    try:
        chat = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": inhalt}
            ],
            temperature=0.7,
            max_tokens=800
        )
        response = chat.choices[0].message.content.strip()
        return jsonify({"antwort": response})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/export/docx", methods=["POST"])
def export_docx():
    data = request.get_json()
    chat = data.get("chat", [])

    try:
        doc = Document()
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Calibri'
        font.size = Pt(11)

        doc.add_heading('Gespr√§chsverlauf ‚Äì AlltagsBuddy Therapeut', level=1)
        for item in chat:
            sender = "Du" if item["sender"] == "user" else "AlltagsBuddy"
            for line in item['text'].split("\n"):
                doc.add_paragraph(f"{sender}: {line.strip()}")

        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)

        return send_file(
            buffer,
            as_attachment=True,
            download_name="chat.docx",
            mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/export/pdf", methods=["POST"])
def export_pdf():
    data = request.get_json()
    chat = data.get("chat", [])

    try:
        buffer = BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=2 * cm,
            leftMargin=2 * cm,
            topMargin=2.5 * cm,
            bottomMargin=2.5 * cm
        )

        styles = getSampleStyleSheet()
        story = []

        story.append(Paragraph("Gespr√§chsverlauf ‚Äì AlltagsBuddy Therapeut", styles['Heading1']))
        for item in chat:
            sender = "Du" if item["sender"] == "user" else "AlltagsBuddy"
            for line in item['text'].split("\n"):
                if line.strip():
                    story.append(Paragraph(f"{sender}: {line.strip()}", styles['Normal']))
                    story.append(Spacer(1, 6))

        doc.build(story)

        buffer.seek(0)
        return send_file(
            buffer,
            as_attachment=True,
            download_name="chat.pdf",
            mimetype="application/pdf"
        )

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# === Start (auch f√ºr Render) ===
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port, debug=True)
